package x7c1.salad.sample.parameter

import scala.language.reflectiveCalls

import org.scalatest.{FlatSpecLike, Matchers}
import x7c1.salad.parameter.Agglomerator.define

class AgglomeratorTest extends FlatSpecLike with Matchers {

  def show = define { (id: Int, name: String) =>
    s"id:$id, name:$name"
  }

  behavior of "function generated by `define`"

  it should "accept usual arguments" in {
    show(123, "foo") shouldBe "id:123, name:foo"
  }

  case class SampleUser(id: Int, name: String, nick: String)

  it should "accept an object whose field has each arguments" in {
    val user = SampleUser(
      id = 123,
      name = "foo",
      nick = "bar"
    )
    show(user) shouldBe "id:123, name:foo"
  }

}
